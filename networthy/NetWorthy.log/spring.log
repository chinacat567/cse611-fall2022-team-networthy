14:53:54:450 [INFO] org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin [RMI TCP Connection(258)-127.0.0.1]  Application shutdown requested.
14:53:54:610 [INFO] org.apache.catalina.core.StandardService [RMI TCP Connection(258)-127.0.0.1]  Stopping service [Tomcat]
14:53:54:620 [INFO] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] [RMI TCP Connection(258)-127.0.0.1]  Destroying Spring FrameworkServlet 'dispatcherServlet'
14:53:54:647 [WARN] org.apache.catalina.loader.WebappClassLoaderBase [RMI TCP Connection(258)-127.0.0.1]  The web application [ROOT] appears to have started a thread named [BufferPoolPruner-1-thread-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@15.0.2/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@15.0.2/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@15.0.2/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1661)
 java.base@15.0.2/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@15.0.2/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@15.0.2/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1056)
 java.base@15.0.2/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1116)
 java.base@15.0.2/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
 java.base@15.0.2/java.lang.Thread.run(Thread.java:832)
14:53:54:649 [WARN] org.apache.catalina.loader.WebappClassLoaderBase [RMI TCP Connection(258)-127.0.0.1]  The web application [ROOT] appears to have started a thread named [cluster-ClusterId{value='633a3dd9b487837e2505e1d1', description='null'}-localhost:27017] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@15.0.2/sun.nio.ch.Net.poll(Native Method)
 java.base@15.0.2/sun.nio.ch.NioSocketImpl.park(NioSocketImpl.java:181)
 java.base@15.0.2/sun.nio.ch.NioSocketImpl.timedRead(NioSocketImpl.java:285)
 java.base@15.0.2/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:309)
 java.base@15.0.2/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:350)
 java.base@15.0.2/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:803)
 java.base@15.0.2/java.net.Socket$SocketInputStream.read(Socket.java:981)
 app//com.mongodb.internal.connection.SocketStream.read(SocketStream.java:110)
 app//com.mongodb.internal.connection.SocketStream.read(SocketStream.java:135)
 app//com.mongodb.internal.connection.InternalStreamConnection.receiveResponseBuffers(InternalStreamConnection.java:713)
 app//com.mongodb.internal.connection.InternalStreamConnection.receiveMessageWithAdditionalTimeout(InternalStreamConnection.java:571)
 app//com.mongodb.internal.connection.InternalStreamConnection.receiveCommandMessageResponse(InternalStreamConnection.java:410)
 app//com.mongodb.internal.connection.InternalStreamConnection.receive(InternalStreamConnection.java:369)
 app//com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.lookupServerDescription(DefaultServerMonitor.java:221)
 app//com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:157)
 java.base@15.0.2/java.lang.Thread.run(Thread.java:832)
14:53:54:650 [WARN] org.apache.catalina.loader.WebappClassLoaderBase [RMI TCP Connection(258)-127.0.0.1]  The web application [ROOT] appears to have started a thread named [cluster-rtt-ClusterId{value='633a3dd9b487837e2505e1d1', description='null'}-localhost:27017] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@15.0.2/java.lang.Thread.sleep(Native Method)
 app//com.mongodb.internal.connection.DefaultServerMonitor.waitForNext(DefaultServerMonitor.java:443)
 app//com.mongodb.internal.connection.DefaultServerMonitor.access$1500(DefaultServerMonitor.java:64)
 app//com.mongodb.internal.connection.DefaultServerMonitor$RoundTripTimeRunnable.run(DefaultServerMonitor.java:415)
 java.base@15.0.2/java.lang.Thread.run(Thread.java:832)
14:53:54:651 [WARN] org.apache.catalina.loader.WebappClassLoaderBase [RMI TCP Connection(258)-127.0.0.1]  The web application [ROOT] appears to have started a thread named [MaintenanceTimer-2-thread-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@15.0.2/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@15.0.2/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@15.0.2/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1661)
 java.base@15.0.2/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@15.0.2/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@15.0.2/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1056)
 java.base@15.0.2/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1116)
 java.base@15.0.2/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
 java.base@15.0.2/java.lang.Thread.run(Thread.java:832)
